<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2024/08/24/Docker/</url>
    <content><![CDATA[<p>这是一篇在B站尚硅谷那学到的Docker笔记</p>
<span id="more"></span>

<blockquote class='blockquote-center'><p>人类的悲欢并不相通，我只觉得他们吵闹。<br><strong>——鲁迅</strong></p>
</blockquote>

<h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>系统平滑移植，容器虚拟化技术，软件可以带环境安装。</p>
<p>通过<strong>镜像</strong>将业务系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台运作。</p>
<img src="/img/Docker/docker介绍.png" alt="Docker介绍" height="50%">

<ul>
<li>传统虚拟机技术虚拟出一套硬件，在其上运行一个完整的操作系统，再运行所需应用进程；</li>
<li>容器内的应用进程直接运行于宿主的内核，容器没有自己的内核也没有硬件虚拟，容器比虚拟机更为轻便，每个容器都有自己的文件系统；</li>
</ul>
<p><a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a></p>
<p><a href="https://github.com/docker-archive/docker-ce">GitHub - docker-archive&#x2F;docker-ce: :warning: This repository is deprecated and will be archived (Docker CE itself is NOT deprecated) see the https://github.com/docker/docker-ce/blob/master/README.md :warning:</a></p>
<p><a href="https://hubgw.docker.com/">Docker Hub Container Image Library | App Containerization</a></p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><img src="/img/Docker/安装前提.png" alt="安装前提" height="50%">
<img src="/img/Docker/安装教程.png" alt="安装教程" height="50%">

<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>只读的模板，可以用来创建Docker容器，一个镜像可以创建很多容器。</p>
<p>Java类模板</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>new 的实例对象，用镜像创的运行实例。</p>
<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>集中存放镜像文件的场所，类似于Maven、GitHub</p>
<p>Docker Hub存放各种镜像模板。</p>
<p><a href="https://cloud.tencent.com/developer/article/1768295">图解 Docker 架构-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<img src="/img/Docker/Docker架构图.png" alt="Docker架构图" height="50%">

<ul>
<li>启动Docker:<code>systemctl start docker</code></li>
<li>终止Docker:<code>systemctl stop docker</code></li>
<li>卸载：<ul>
<li><code>yum remove docker-ce docker-ce-cli containerd.io</code></li>
<li><code>rm -rf /var/lib/docker</code></li>
<li><code>rm -rf /var/lib/containerd</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Databend结项报告</title>
    <url>/2024/09/16/Databend%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>Databend的项目结束啦，这是结项报告，虽然内容不多（主要是因为语文功底不行，写不出多少文字），但是收获确实非常大的，真的很感谢这次机会<code>(*^▽^*)</code></p>
<span id="more"></span>

<h1 id="洪文丽-246460479-结项报告"><a href="#洪文丽-246460479-结项报告" class="headerlink" title="洪文丽-246460479-结项报告"></a>洪文丽-246460479-结项报告</h1><h2 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h2><ul>
<li><p>项目名称：支持 External Dictionaries</p>
</li>
<li><p>方案描述：为了提高Databend数据库的效率和数据一致性，可以引入数据字典功能，并开发相应的字典函数，使用户能够直接从Databend查询存储在MySQL、Redis等外部数据源的信息。通过创建数据字典和使用如<code>dict_get</code>这样的字典函数，Databend可以避免繁琐的数据导出和导入过程，确保数据的实时更新和准确性。这种设计简化了大量数据处理的复杂性，提供了强大的数据管理能力。</p>
</li>
<li><p>时间规划：</p>
<img src="/img/Databend/时间轴.png" alt="时间规划" height="50%"></li>
</ul>
<h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><ul>
<li><p>已完成工作：</p>
<ol>
<li>编写并提交了 RFC 文档，明确了技术架构、功能设计及实现细节</li>
<li>实现了对 <code>CREATE</code>、<code>DROP</code>、<code>SHOW</code> 等字典管理 SQL 语句的解析和执行支持，确保字典的增删查功能具备完整的 SQL 操作接口</li>
<li>支持字典元数据API</li>
<li>提供了常用字典函数（如 <code>dict_get</code>），支持用户从 MySQL、Redis 等数据源中直接检索数据并返回结果</li>
<li>支持将 Redis以及Mysql 作为数据源，并实现相关的DDL</li>
</ol>
</li>
<li><p>遇到的问题及解决方案：</p>
<ul>
<li>最初由于 Git 操作不熟练，经过导师指导，逐渐掌握了 Git 和 GitHub 的使用，提高了代码管理的效率。</li>
<li>在项目初期，由于开发环境较为复杂且对硬件资源需求较高，本地配置和运行时遇到了内存不足等问题。为了应对这一挑战，导师提供了一台高性能远程服务器作为编译和测试环境，大大提升了开发效率和代码调试的顺畅性。此外，我们通过 Docker 容器化环境进行分布式测试，以确保不同开发环节的兼容性。</li>
<li>我们计划使用<code>opendal</code>读取数据库中的数据，发现它需要数据库中的数据类型为<code>BLOB/TEXT</code>，与我们的预期效果不一致，但是导师说有问题可以慢慢优化，于是导师优化了<code>opendal</code>，使得它能够在我们项目中使用。</li>
<li>在对 <code>dict_get</code> 函数进行 MySQL 数据库数据读取测试时，我们通过 <code>mysql_srv</code> 模拟服务器响应。最初使用官方示例代码进行测试时，遇到编译错误。导师深入分析了问题根源，主要涉及客户端预处理语句的处理不当。通过改进请求和响应处理逻辑，修改了示例代码中的参数传递方式，最终使测试顺利通过。此外，添加了更多边缘测试用例，以确保该功能在不同数据场景下的稳定性。</li>
</ul>
</li>
<li><p>测试用例：</p>
<ol>
<li><p>在Databend创建&#x2F;删除&#x2F;查看Dictionary，以下为部分测试结果示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement ok</span><br><span class="line">CREATE DICTIONARY d(c1 VARCHAR NOT NULL, c2 VARCHAR NOT NULL) PRIMARY KEY c1 SOURCE(mysql(host=&#x27;localhost&#x27; port=&#x27;3306&#x27; username=&#x27;root&#x27; password=&#x27;1234&#x27; db=&#x27;db1&#x27; table=&#x27;test_table&#x27;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query TT</span><br><span class="line">show create dictionary d</span><br><span class="line">----</span><br><span class="line">d CREATE DICTIONARY d ( c1 VARCHAR NOT NULL, c2 VARCHAR NOT NULL ) PRIMARY KEY c1 SOURCE(mysql(db=&#x27;db1&#x27; host=&#x27;localhost&#x27; password=&#x27;[HIDDEN]&#x27; port=&#x27;3306&#x27; table=&#x27;test_table&#x27; username=&#x27;root&#x27;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement ok</span><br><span class="line">DROP DICTIONARY IF EXISTS d;</span><br></pre></td></tr></table></figure>

<p>使用 <code>databend-sqllogictests</code> 工具来运行 SQL Logic Tests。SQL Logic Tests 是一种用于测试数据库查询正确性的测试套件，它包含了一系列的测试用例，用于验证数据库系统是否能够正确处理各种 SQL 查询。</p>
<p>如图所示，测试通过：</p>
<p>![dictionary_ddl](C:\Users\86182\Desktop\Databend\屏幕截图 2024-08-19 160032.png)</p>
</li>
<li><p>通过 <code>dict_get</code> 函数，能够高效地从从 Redis 和 MySQL 数据源中成功检索数据，并返回字典数据。以下为部分测试结果示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement ok</span><br><span class="line">CREATE OR REPLACE DICTIONARY d(key string not null, value string not null) PRIMARY KEY key SOURCE(redis(host=&#x27;127.0.0.1&#x27; port=&#x27;6379&#x27;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query T</span><br><span class="line">SELECT dict_get(d, &#x27;value&#x27;, &#x27;b&#x27;)</span><br><span class="line">----</span><br><span class="line">b_value</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement ok</span><br><span class="line">CREATE OR REPLACE DICTIONARY d2(id int, name string, age uint16, salary float, active bool) PRIMARY KEY id SOURCE(mysql(host=&#x27;localhost&#x27; port=&#x27;3106&#x27; username=&#x27;root&#x27; password=&#x27;123456&#x27; db=&#x27;test&#x27; table=&#x27;user&#x27;));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query TIFT</span><br><span class="line">select dict_get(d2, &#x27;name&#x27;, 1), dict_get(d2, &#x27;age&#x27;, 1), dict_get(d2, &#x27;salary&#x27;, 1), dict_get(d2, &#x27;active&#x27;, 1)</span><br><span class="line">----</span><br><span class="line">Alice 24 100.0 1</span><br></pre></td></tr></table></figure>

<p>如图所示，测试通过：</p>
<p>![dict_get_func](C:\Users\86182\Desktop\Databend\屏幕截图 2024-09-12 152921.png)</p>
</li>
</ol>
</li>
<li><p>后续工作安排：</p>
<p>后续我们将逐步扩展对 MySQL 中复杂数据类型（如 Date、Timestamp）的支持，以满足更多时间相关查询的需求。此外，项目计划进一步集成 PostgreSQL、ClickHouse 等常用数据库作为外部字典数据源，并对 NoSQL 数据库进行探索性研究，增强系统在多样化数据场景中的兼容性和扩展性。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Databend</category>
      </categories>
  </entry>
  <entry>
    <title>First Try.</title>
    <url>/2024/09/13/hello-world/</url>
    <content><![CDATA[<p>介绍了如何启动该博客</p>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Beautiful photos</title>
    <url>/2024/09/14/%E6%88%91%E7%9A%84%E7%BE%8E%E7%85%A7/</url>
    <content><![CDATA[<p>今天去中街拍了个写真，算是一次大胆的尝试，因为试了四种风格，和平时的我非常不一样，这里就放四种风格里我觉得每种风格里最好看的一张(可都是没有P过的高清相机原图哦)，在博客里放自己的照片，我是不是太自恋了<code>⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄</code></p>
<span id="more"></span>

<p>第一张是纯欲风，看上去我非常的楚楚动人，背景也很干净，显得我人就干净了许多，但是这件衣服从前面看上去一切正常，但是后面是一整个大露背，不过也没拍到。</p>
<img src="/img/life/first.jpg" alt="纯欲风" height="50%">

<p>第二张是港风，拍起来真的好有感觉，就像我是那种有很多故事的成熟御姐，是我喜欢的风格，但是舍友说我不太适合这种风格，不过尝试一下还是非常好的。这件衣服前面就是一个深V，拍的时候胸贴都能开到，下摆还是个高开叉，直接开到大腿根，也就只能拍照穿穿了。</p>
<img src="/img/life/second.jpg" alt="港风" height="50%">

<p>第三张就是可爱风了，其实我不太喜欢这种风格，因为平时就是这种，但是舍友说我就适合这种，<code>(ಥ﹏ಥ)</code>，不过拍出来也挺好看的，主要是为了20岁生日的时候发个朋友圈<code>(*^▽^*)</code></p>
<img src="/img/life/third.jpg" alt="可爱风" height="50%">

<p>最后一张我看模特图还挺好看的，自己拍出来就满满的违和感，像是小孩穿了大人的衣服一样，一点都不合适，看来我的女强人梦破灭了，不过女强人也可以不穿西装的对吧，没错，<code>(#^.^#)</code></p>
<img src="/img/life/fourth.jpg" alt="职场风" height="50%">]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
</search>
